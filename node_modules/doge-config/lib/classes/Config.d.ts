import { UnknownObject, ValidConfigValue } from '../types';
import ConfigArray from './ConfigArray';
import ConfigField from './ConfigField';
export declare class Config extends ConfigField {
    #private;
    constructor(name: string, defaults?: object, confdir?: string);
    __update(): void;
    __save(): void;
    get array(): ConfigArray;
    __get(property: string): ValidConfigValue;
    __set(
        property: string,
        value: ValidConfigValue | UnknownObject | object,
        save?: boolean
    ): ValidConfigValue;
    save(): void;
    get(property: string): ValidConfigValue;
    set(
        property: string,
        value: ValidConfigValue | UnknownObject | object
    ): ValidConfigValue;
    has(property: string): boolean;
    __getField(property: string): ConfigField;
    __getString(property: string): string;
    __getNumber(property: string): number;
    __getBoolean(property: string): boolean;
    __getArray(property: string): ConfigArray;
    __forceField(property: string): ConfigField;
    __forceString(property: string): string;
    __forceNumber(property: string): number;
    __forceBoolean(property: string): boolean;
    __forceArray(property: string): ConfigArray;
    __has(property: string): boolean;
    __setDefault(...initArray: Array<any>): void;
    toJSON():
        | ValidConfigValue[]
        | {
              [x: string]: ValidConfigValue;
          };
}
export default Config;
