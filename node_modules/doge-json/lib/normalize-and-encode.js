'use strict';
var __importDefault =
	(this && this.__importDefault) ||
	function (mod) {
		return mod && mod.__esModule ? mod : { default: mod };
	};
Object.defineProperty(exports, '__esModule', { value: true });
exports.encode = exports.normalize_object = void 0;
const decode_1 = __importDefault(require('./decode'));
const transforms_1 = require('./transforms');
/**
 * Normalize object - remove un-JSON-able values
 * @param o The object you want normalized
 * @param stack Ignore this parameter
 * @returns a normalized object
 */
function normalize_object(o, stack = []) {
	if (!(stack === null || stack === void 0 ? void 0 : stack.length))
		stack = [o];
	if (o instanceof Array) {
		return o.map((a) =>
			typeof a === 'object'
				? normalize_object(a, [...stack, o])
				: (0, decode_1.default)(encode(a))
		);
	} else {
		const normalized = {};
		for (const [field, value] of Object.entries(o)) {
			if (value && typeof value === 'object') {
				if (stack.includes(value)) {
					normalized[field] = '<< RECURSION >>';
				} else {
					stack.push(value);
					if (value instanceof Map) {
						normalized[field] = normalize_object(
							(0, transforms_1.map)(value),
							stack
						);
					} else if (value instanceof Set) {
						normalized[field] = normalize_object(
							(0, transforms_1.set)(value),
							stack
						);
					} else {
						normalized[field] = normalize_object(value, stack);
					}
					stack.pop();
				}
			} else {
				normalized[field] = (0, decode_1.default)(encode(value));
			}
		}
		return normalized;
	}
}
exports.normalize_object = normalize_object;
/**
 * Encode an annoying thing
 *
 * Deals with recursive objects, symbols, etc.
 *
 * @param thing Some thing
 * @returns the JSON reprezentation of the thing
 */
function encode(thing) {
	if (thing instanceof Map) return encode((0, transforms_1.map)(thing));
	if (thing instanceof Set) return encode((0, transforms_1.set)(thing));
	if (
		typeof thing === 'boolean' ||
		typeof thing === 'number' ||
		typeof thing === 'bigint'
	) {
		return `${thing}`;
	} else if (
		typeof thing === 'string' ||
		typeof thing === 'symbol' ||
		typeof thing === 'function'
	) {
		return JSON.stringify(thing.toString());
	} else if (thing && typeof thing === 'object') {
		return JSON.stringify(normalize_object(thing), null, '\t') + '\n';
	} else {
		return 'null';
	}
}
exports.encode = encode;
