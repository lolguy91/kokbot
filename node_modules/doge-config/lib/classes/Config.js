'use strict';
var __classPrivateFieldSet =
    (this && this.__classPrivateFieldSet) ||
    function (receiver, state, value, kind, f) {
        if (kind === 'm') throw new TypeError('Private method is not writable');
        if (kind === 'a' && !f)
            throw new TypeError(
                'Private accessor was defined without a setter'
            );
        if (
            typeof state === 'function'
                ? receiver !== state || !f
                : !state.has(receiver)
        )
            throw new TypeError(
                'Cannot write private member to an object whose class did not declare it'
            );
        return (
            kind === 'a'
                ? f.call(receiver, value)
                : f
                ? (f.value = value)
                : state.set(receiver, value),
            value
        );
    };
var __classPrivateFieldGet =
    (this && this.__classPrivateFieldGet) ||
    function (receiver, state, kind, f) {
        if (kind === 'a' && !f)
            throw new TypeError(
                'Private accessor was defined without a getter'
            );
        if (
            typeof state === 'function'
                ? receiver !== state || !f
                : !state.has(receiver)
        )
            throw new TypeError(
                'Cannot read private member from an object whose class did not declare it'
            );
        return kind === 'm'
            ? f
            : kind === 'a'
            ? f.call(receiver)
            : f
            ? f.value
            : state.get(receiver);
    };
var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
        return mod && mod.__esModule ? mod : { default: mod };
    };
var _Config__file, _Config__data;
Object.defineProperty(exports, '__esModule', { value: true });
exports.Config = void 0;
const doge_json_1 = require('doge-json');
const path_1 = __importDefault(require('path'));
const normalizeConfigName_1 = __importDefault(
    require('../utils/normalizeConfigName')
);
const writeConfig_1 = __importDefault(require('../utils/writeConfig'));
const ConfigField_1 = __importDefault(require('./ConfigField'));
class Config extends ConfigField_1.default {
    constructor(name, defaults, confdir = 'config') {
        super(null, null);
        _Config__file.set(this, void 0);
        _Config__data.set(this, void 0);
        name = (0, normalizeConfigName_1.default)(name);
        __classPrivateFieldSet(
            this,
            _Config__file,
            path_1.default.resolve('.', confdir, name + '.json'),
            'f'
        );
        const data = (0, doge_json_1.read)(
            __classPrivateFieldGet(this, _Config__file, 'f')
        );
        __classPrivateFieldSet(
            this,
            _Config__data,
            new ConfigField_1.default(this, null),
            'f'
        );
        __classPrivateFieldGet(this, _Config__data, 'f').__setDefault(
            data || {},
            defaults || {}
        );
        this.__update();
    }
    __update() {
        for (const property of Object.keys(
            __classPrivateFieldGet(this, _Config__data, 'f')
        )) {
            if (!(property in this)) {
                Object.defineProperty(this, property, {
                    configurable: true,
                    enumerable: true,
                    get() {
                        return this.__get(property);
                    },
                    set(value) {
                        this.__set(property, value);
                    },
                });
            }
        }
    }
    __save() {
        (0, writeConfig_1.default)(
            __classPrivateFieldGet(this, _Config__file, 'f'),
            __classPrivateFieldGet(this, _Config__data, 'f')
        );
        this.__update();
    }
    get array() {
        return __classPrivateFieldGet(this, _Config__data, 'f').array;
    }
    __get(property) {
        return __classPrivateFieldGet(this, _Config__data, 'f').__get(property);
    }
    __set(property, value, save = true) {
        return __classPrivateFieldGet(this, _Config__data, 'f').__set(
            property,
            value,
            save
        );
    }
    save() {
        return this.__save();
    }
    get(property) {
        return this.__get(property);
    }
    set(property, value) {
        return this.__set(property, value);
    }
    has(property) {
        return this.__has(property);
    }
    __getField(property) {
        return __classPrivateFieldGet(this, _Config__data, 'f').__getField(
            property
        );
    }
    __getString(property) {
        return __classPrivateFieldGet(this, _Config__data, 'f').__getString(
            property
        );
    }
    __getNumber(property) {
        return __classPrivateFieldGet(this, _Config__data, 'f').__getNumber(
            property
        );
    }
    __getBoolean(property) {
        return __classPrivateFieldGet(this, _Config__data, 'f').__getBoolean(
            property
        );
    }
    __getArray(property) {
        return this.__getField(property).array;
    }
    __forceField(property) {
        return __classPrivateFieldGet(this, _Config__data, 'f').__forceField(
            property
        );
    }
    __forceString(property) {
        return __classPrivateFieldGet(this, _Config__data, 'f').__forceString(
            property
        );
    }
    __forceNumber(property) {
        return __classPrivateFieldGet(this, _Config__data, 'f').__forceNumber(
            property
        );
    }
    __forceBoolean(property) {
        return __classPrivateFieldGet(this, _Config__data, 'f').__forceBoolean(
            property
        );
    }
    __forceArray(property) {
        return __classPrivateFieldGet(this, _Config__data, 'f').__forceArray(
            property
        );
    }
    __has(property) {
        return property in __classPrivateFieldGet(this, _Config__data, 'f');
    }
    __setDefault(...initArray) {
        __classPrivateFieldGet(this, _Config__data, 'f').__setDefault(
            ...initArray
        );
    }
    toJSON() {
        return __classPrivateFieldGet(this, _Config__data, 'f').toJSON();
    }
}
exports.Config = Config;
(_Config__file = new WeakMap()), (_Config__data = new WeakMap());
exports.default = Config;
module.exports = Config;
Object.defineProperties(Config, {
    default: { get: () => Config },
    Config: { get: () => Config },
});
