'use strict';
var _b;
Object.defineProperty(exports, '__esModule', { value: true });
exports.ConfigMap = exports.getMap = void 0;
const MapField = new WeakMap();
const FieldMap = new WeakMap();
function getMap(field) {
    return FieldMap.get(field) || new ConfigMap(field);
}
exports.getMap = getMap;
class ConfigMap {
    constructor(field) {
        this[_b] = 'ConfigMap';
        MapField.set(this, field);
        FieldMap.set(field, this);
    }
    get field() {
        const field = MapField.get(this);
        if (field) return field;
        throw new Error('ConfigField is gone!');
    }
    get size() {
        return this.field.array.length;
    }
    *[Symbol.iterator]() {
        for (const value of Object.entries(this.field)) {
            yield value;
        }
    }
    clear() {
        const { field } = this;
        field.array.filter((_a) => false);
        return field;
    }
    delete(property) {
        const { field } = this;
        field.__set(property.toString(), null);
        return true;
    }
    entries() {
        const iterate = this[Symbol.iterator]();
        return {
            [Symbol.iterator]: () => this.entries(),
            next: () => iterate.next(),
        };
    }
    forEach(callback, thisArgument) {
        const { field } = this;
        for (const property of Object.keys(field)) {
            try {
                callback.call(
                    thisArgument || this,
                    field.__get(property),
                    property,
                    this
                );
            } catch (error) {
                console.error(error);
            }
        }
        return field;
    }
    get(property) {
        var _c;
        return (_c = this.field.__get(property)) !== null && _c !== void 0
            ? _c
            : undefined;
    }
    has(property) {
        return this.field.__has(property);
    }
    set(property, value) {
        this.field.__set(property, value);
        return this;
    }
    *keys_iter() {
        for (const value of Object.keys(this.field)) {
            if (this.field.__get(value)) {
                yield value;
            }
        }
    }
    keys() {
        const iterate = this.keys_iter();
        return {
            [Symbol.iterator]: () => this.keys(),
            next: () => iterate.next(),
        };
    }
    *vals_iter() {
        for (const key of this.keys_iter()) {
            yield this.field.__get(key);
        }
    }
    values() {
        const iterate = this.vals_iter();
        return {
            [Symbol.iterator]: () => this.values(),
            next: () => iterate.next(),
        };
    }
}
exports.ConfigMap = ConfigMap;
_b = Symbol.toStringTag;
exports.default = ConfigMap;
module.exports = ConfigMap;
Object.defineProperties(ConfigMap, {
    default: { get: () => ConfigMap },
    MapField: { get: () => ConfigMap },
    getMap: { get: () => getMap },
});
