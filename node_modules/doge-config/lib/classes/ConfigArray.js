'use strict';
var __classPrivateFieldSet =
    (this && this.__classPrivateFieldSet) ||
    function (receiver, state, value, kind, f) {
        if (kind === 'm') throw new TypeError('Private method is not writable');
        if (kind === 'a' && !f)
            throw new TypeError(
                'Private accessor was defined without a setter'
            );
        if (
            typeof state === 'function'
                ? receiver !== state || !f
                : !state.has(receiver)
        )
            throw new TypeError(
                'Cannot write private member to an object whose class did not declare it'
            );
        return (
            kind === 'a'
                ? f.call(receiver, value)
                : f
                ? (f.value = value)
                : state.set(receiver, value),
            value
        );
    };
var __classPrivateFieldGet =
    (this && this.__classPrivateFieldGet) ||
    function (receiver, state, kind, f) {
        if (kind === 'a' && !f)
            throw new TypeError(
                'Private accessor was defined without a getter'
            );
        if (
            typeof state === 'function'
                ? receiver !== state || !f
                : !state.has(receiver)
        )
            throw new TypeError(
                'Cannot read private member from an object whose class did not declare it'
            );
        return kind === 'm'
            ? f
            : kind === 'a'
            ? f.call(receiver)
            : f
            ? f.value
            : state.get(receiver);
    };
var _ConfigArray__field;
Object.defineProperty(exports, '__esModule', { value: true });
exports.ConfigArray = void 0;
class ConfigArray extends Array {
    constructor(field) {
        super(...Object.values(field));
        _ConfigArray__field.set(this, void 0);
        __classPrivateFieldSet(this, _ConfigArray__field, field, 'f');
    }
    __save() {
        let index = -1;
        const keys = Object.keys(
            __classPrivateFieldGet(this, _ConfigArray__field, 'f')
        );
        for (const value of this) {
            __classPrivateFieldGet(this, _ConfigArray__field, 'f').__set(
                keys[++index] || index.toString(),
                value,
                false
            );
        }
        while (++index < keys.length) {
            const key = keys[index];
            Object.defineProperty(
                __classPrivateFieldGet(this, _ConfigArray__field, 'f'),
                key,
                {
                    configurable: true,
                    enumerable: false,
                    get() {
                        return this.__get(key);
                    },
                    set(value) {
                        this.__set(key, value);
                    },
                }
            );
        }
        __classPrivateFieldGet(this, _ConfigArray__field, 'f').save();
    }
}
exports.ConfigArray = ConfigArray;
_ConfigArray__field = new WeakMap();
const methods = [
    'concat',
    'copyWithin',
    'entries',
    'every',
    'fill',
    'filter',
    'find',
    'findIndex',
    'forEach',
    'includes',
    'indexOf',
    'join',
    'keys',
    'lastIndexOf',
    'length',
    'map',
    'pop',
    'push',
    'reduce',
    'reduceRight',
    'reverse',
    'shift',
    'slice',
    'some',
    'sort',
    'splice',
    'toLocaleString',
    'toString',
    'unshift',
    'values',
];
for (const method of methods) {
    Object.assign(ConfigArray.prototype, {
        [method]: function (...arguments_) {
            const result = Array.prototype[method].call(this, ...arguments_);
            if (result instanceof ConfigArray) {
                Object.assign(this, result);
                this.__save();
                return this;
            }
            this.__save();
            return result;
        },
    });
}
exports.default = ConfigArray;
module.exports = ConfigArray;
Object.defineProperties(ConfigArray, {
    default: { get: () => ConfigArray },
    ConfigArray: { get: () => ConfigArray },
});
