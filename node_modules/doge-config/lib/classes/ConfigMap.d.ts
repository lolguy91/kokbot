import { ValidConfigValue } from '../types';
import ConfigField from './ConfigField';
export declare function getMap(field: ConfigField): ConfigMap;
export declare class ConfigMap implements Map<string, ValidConfigValue> {
    constructor(field: ConfigField);
    get field(): ConfigField;
    get size(): number;
    [Symbol.iterator](): Generator<[string, any], void, unknown>;
    clear(): ConfigField;
    delete(property: string | Symbol): boolean;
    entries(): {
        [Symbol.iterator]: () => any;
        next: () => IteratorResult<[string, any], void>;
    };
    forEach(
        callback: (
            item: ValidConfigValue,
            property: string,
            map: ConfigMap
        ) => any,
        thisArgument: any
    ): ConfigField;
    get(property: string): string | number | boolean | ConfigField | undefined;
    has(property: string): boolean;
    set(property: string, value: ValidConfigValue | object): this;
    keys_iter(): Generator<string, void, unknown>;
    keys(): {
        [Symbol.iterator]: () => any;
        next: () => IteratorResult<string, void>;
    };
    vals_iter(): Generator<ValidConfigValue, void, unknown>;
    values(): {
        [Symbol.iterator]: () => any;
        next: () => IteratorResult<ValidConfigValue, void>;
    };
    [Symbol.toStringTag]: string;
}
export default ConfigMap;
