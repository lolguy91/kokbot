export declare class PsGenerator<type> implements Generator<type, type, type> {
	generator: Generator<type, type, type>;
	constructor(fn: () => type);
	next(val?: type | undefined): IteratorResult<type, type>;
	return(val: type): IteratorResult<type, type>;
	throw(err: Error): IteratorResult<type, type>;
	[Symbol.iterator](): Generator<type, type, unknown>;
	/**
	 * Join multiple generators together
	 * @param comparing_fn Determines order of element: -1 for left first, 1 for right first
	 * @param generators
	 */
	static join<type>(
		comparing_fn: (left: type, right: type) => number | boolean,
		...generators: Array<
			| PsGenerator<type>
			| Generator<type, type | undefined, type | undefined>
		>
	): Generator<type, undefined, type | undefined>;
}
export default PsGenerator;
export { PsGenerator as Generator };
