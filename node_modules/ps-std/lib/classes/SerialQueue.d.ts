import { Queue } from './Queue';
import type { Callback } from './Queue';
export declare class SerialQueue implements Queue {
	error_handler?: Callback;
	constructor(error_handler: Callback);
	/** Internal queue object */
	_queue: Queue;
	/** Internal queue array */
	get queue(): Callback[];
	/** Is something being processed? */
	get working(): boolean;
	/** Function that forces queue to process next callback */
	next_async(): void;
	/** Function that forces queue to process next callback */
	get next(): () => void;
	/** Add callback(s) to queue */
	get add(): (...callbacks: Array<CallableFunction>) => void;
	/** Get a Promise that will resolve once CURRENT callbacks are done */
	get promise(): Promise<unknown>;
	protected _done: Promise<void> | undefined;
	protected _donecb: () => void;
	get done(): Promise<void>;
}
export default SerialQueue;
