'use strict';
var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
        return mod && mod.__esModule ? mod : { default: mod };
    };
Object.defineProperty(exports, '__esModule', { value: true });
exports.ConfigDir = void 0;
const doge_json_1 = require('doge-json');
const path_1 = __importDefault(require('path'));
const normalizeConfigName_1 = __importDefault(
    require('../utils/normalizeConfigName')
);
const Config_1 = __importDefault(require('./Config'));
class ConfigDir {
    constructor(name, defaults, confdir = 'config') {
        const full_path = path_1.default.resolve(confdir, name);
        const configs = {};
        const getConfig = (name) => {
            const normalized = (0, normalizeConfigName_1.default)(name);
            return configs[normalized]
                ? configs[normalized]
                : (configs[normalized] = new Config_1.default(
                      normalized,
                      defaults,
                      full_path
                  ));
        };
        const proxy = new Proxy(this, {
            get(_target, key) {
                return getConfig(key);
            },
            has(_target, key) {
                key = (0, normalizeConfigName_1.default)(key);
                return (
                    key in configs ||
                    doge_json_1.fs.existsSync(
                        path_1.default.resolve(full_path, `${key}.json`)
                    )
                );
            },
            set(_target, key, value) {
                if (typeof value === 'object') {
                    const config = getConfig(key.toString());
                    for (const [key, value_] of Object.entries(value)) {
                        config.__set(key, value_);
                    }
                } else {
                    getConfig('data').__set(key, value);
                }
                return true;
            },
        });
        return proxy;
    }
}
exports.ConfigDir = ConfigDir;
exports.default = module.exports = ConfigDir;
Object.defineProperties(ConfigDir, {
    default: { get: () => ConfigDir },
    ConfigDir: { get: () => ConfigDir },
});
