import type { Hashable } from './util';
/**
 * Little-endian byte access
 * @returns the little-endian uint32 at v[i..i+3]
 */
export declare function B2S_GET32(v: Uint8Array, i: number): number;
/**
 * Mixing function G.
 */
export declare function B2S_G(
	a: number,
	b: number,
	c: number,
	d: number,
	x: number,
	y: number
): void;
/**
 * 32-bit right rotation
 * @param x uint32
 * @param y between 1 and 31, inclusive
 */
export declare function ROTR32(x: number, y: number): number;
/**
 * Initialization Vector
 */
export declare const BLAKE2S_IV: Uint32Array;
export declare const SIGMA: Uint8Array;
export interface Blake2sCTX {
	h: Uint32Array;
	b: Uint8Array;
	c: number;
	t: number;
	outlen: number;
}
/**
 * Compress in streaming hash
 * @param ctx hashing context
 * @param last indicates, whether the block is the last block
 */
export declare function blake2sCompress(ctx: Blake2sCTX, last?: boolean): void;
/**
 * Creates a Blake2s hashing context
 * @param outlen between 1 and 32
 * @param key optional Uint8Array key
 * @returns {Blake2sCTX}
 */
export declare function blake2sInit(
	outlen: number,
	key?: Uint8Array
): Blake2sCTX;
/**
 * Updates a Blake2s streaming hash
 * @param ctx hash context
 * @param input byte array
 */
export declare function blake2sUpdate(ctx: Blake2sCTX, input: Uint8Array): void;
/**
 * Completes a Blake2s streaming hash
 * @param ctx hash context
 * @returns Uint8Array containing the message digest
 */
export declare function blake2sFinal(ctx: Blake2sCTX): Uint8Array;
/**
 * Computes the Blake2s hash of a string or byte array, and returns a Uint8Array
 * @param input the input bytes, as a string, Buffer, or Uint8Array
 * @param key optional key Uint8Array, up to 32 bytes
 * @param outlen optional output length in bytes, defaults to 64
 * @returns an n-byte Uint8Array
 */
export declare function blake2s(
	input: Hashable,
	key?: Uint8Array,
	outlen?: number
): Uint8Array;
/**
 *
 * @param input the input bytes, as a string, Buffer, or Uint8Array
 * @param key optional key Uint8Array, up to 32 bytes
 * @param outlen optional output length in bytes, defaults to 64
 * @returns
 */
export declare function blake2sHex(
	input: Hashable,
	key?: Uint8Array,
	outlen?: number
): string;
/**
 *
 * @param input the input bytes, as a string, Buffer, or Uint8Array
 * @param key optional key Uint8Array, up to 32 bytes
 * @param outlen optional output length in bytes, defaults to 64
 * @returns the hash, as a bigint
 */
export declare function blake2sBigInt(
	input: Hashable,
	key?: Uint8Array,
	outlen?: number
): bigint;
