'use strict';
var __createBinding =
	(this && this.__createBinding) ||
	(Object.create
		? function (o, m, k, k2) {
				if (k2 === undefined) k2 = k;
				var desc = Object.getOwnPropertyDescriptor(m, k);
				if (
					!desc ||
					('get' in desc
						? !m.__esModule
						: desc.writable || desc.configurable)
				) {
					desc = {
						enumerable: true,
						get: function () {
							return m[k];
						},
					};
				}
				Object.defineProperty(o, k2, desc);
		  }
		: function (o, m, k, k2) {
				if (k2 === undefined) k2 = k;
				o[k2] = m[k];
		  });
var __setModuleDefault =
	(this && this.__setModuleDefault) ||
	(Object.create
		? function (o, v) {
				Object.defineProperty(o, 'default', {
					enumerable: true,
					value: v,
				});
		  }
		: function (o, v) {
				o['default'] = v;
		  });
var __importStar =
	(this && this.__importStar) ||
	function (mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null)
			for (var k in mod)
				if (
					k !== 'default' &&
					Object.prototype.hasOwnProperty.call(mod, k)
				)
					__createBinding(result, mod, k);
		__setModuleDefault(result, mod);
		return result;
	};
var __importDefault =
	(this && this.__importDefault) ||
	function (mod) {
		return mod && mod.__esModule ? mod : { default: mod };
	};
Object.defineProperty(exports, '__esModule', { value: true });
exports.check_filename =
	exports.fetch_object =
	exports.fetch_buffer =
	exports.store_object =
	exports.store_buffer =
	exports.fetch_nsblob =
		void 0;
const coder = __importStar(require('@prokopschield/base64'));
const Json = __importStar(require('doge-json'));
const nsblob_native_if_available_1 = __importDefault(
	require('nsblob-native-if-available')
);
const path_1 = __importDefault(require('path'));
const ps_std_1 = require('ps-std');
exports.fetch_nsblob = (0, ps_std_1.cacheFn)(
	nsblob_native_if_available_1.default.fetch
);
async function store_buffer(buffer) {
	const hex = await nsblob_native_if_available_1.default.store(buffer);
	return coder.encode(Buffer.from(hex, 'hex'));
}
exports.store_buffer = store_buffer;
function store_object(object) {
	return store_buffer(Json.encode(object));
}
exports.store_object = store_object;
function fetch_buffer(hash) {
	return (0, exports.fetch_nsblob)(
		Buffer.from(coder.decode(hash).buffer).toString('hex')
	);
}
exports.fetch_buffer = fetch_buffer;
async function fetch_object(hash) {
	const buffer = await fetch_buffer(hash);
	return Json.decode(String(buffer));
}
exports.fetch_object = fetch_object;
function check_filename(filename) {
	return (
		path_1.default.basename(path_1.default.resolve(filename)) === filename
	);
}
exports.check_filename = check_filename;
