'use strict';
var __classPrivateFieldSet =
    (this && this.__classPrivateFieldSet) ||
    function (receiver, state, value, kind, f) {
        if (kind === 'm') throw new TypeError('Private method is not writable');
        if (kind === 'a' && !f)
            throw new TypeError(
                'Private accessor was defined without a setter'
            );
        if (
            typeof state === 'function'
                ? receiver !== state || !f
                : !state.has(receiver)
        )
            throw new TypeError(
                'Cannot write private member to an object whose class did not declare it'
            );
        return (
            kind === 'a'
                ? f.call(receiver, value)
                : f
                ? (f.value = value)
                : state.set(receiver, value),
            value
        );
    };
var __classPrivateFieldGet =
    (this && this.__classPrivateFieldGet) ||
    function (receiver, state, kind, f) {
        if (kind === 'a' && !f)
            throw new TypeError(
                'Private accessor was defined without a getter'
            );
        if (
            typeof state === 'function'
                ? receiver !== state || !f
                : !state.has(receiver)
        )
            throw new TypeError(
                'Cannot read private member from an object whose class did not declare it'
            );
        return kind === 'm'
            ? f
            : kind === 'a'
            ? f.call(receiver)
            : f
            ? f.value
            : state.get(receiver);
    };
var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
        return mod && mod.__esModule ? mod : { default: mod };
    };
var _ConfigField__array, _ConfigField__parent, _ConfigField__data;
Object.defineProperty(exports, '__esModule', { value: true });
exports.ConfigField = void 0;
const ConfigArray_1 = __importDefault(require('./ConfigArray'));
const ConfigMap_1 = require('./ConfigMap');
class ConfigField {
    constructor(parent, data) {
        _ConfigField__array.set(this, void 0);
        _ConfigField__parent.set(this, void 0);
        _ConfigField__data.set(this, {});
        __classPrivateFieldSet(this, _ConfigField__parent, parent, 'f');
        if (data) {
            for (const property in data) {
                this.__set(property, data[property], false);
            }
        }
    }
    __getTypedProxy(typeConstructor) {
        return new Proxy(this, {
            get(target, key) {
                return typeConstructor(target.__get(String(key)));
            },
            set(target, key, value) {
                target.__set(String(key), typeConstructor(value));
                return true;
            },
        });
    }
    get data() {
        return this.__getTypedProxy((a) => a);
    }
    get bool() {
        return this.__getTypedProxy(Boolean);
    }
    get str() {
        return this.__getTypedProxy((a) => (a ? String(a) : ''));
    }
    get num() {
        return this.__getTypedProxy((a) => Number(a) || 0);
    }
    get obj() {
        return new Proxy(this, {
            get(field, property, _proxy) {
                return field.__getField(property.toString());
            },
            set(field, property, value, _proxy) {
                field.__set(property.toString(), value);
                return true;
            },
        });
    }
    get array() {
        return (
            __classPrivateFieldGet(this, _ConfigField__array, 'f') ||
            __classPrivateFieldSet(
                this,
                _ConfigField__array,
                new ConfigArray_1.default(this),
                'f'
            )
        );
    }
    get is_array() {
        return __classPrivateFieldGet(this, _ConfigField__array, 'f');
    }
    get map() {
        return (0, ConfigMap_1.getMap)(this);
    }
    __save() {
        var _a;
        if (__classPrivateFieldGet(this, _ConfigField__array, 'f')) {
            Object.assign(
                __classPrivateFieldGet(this, _ConfigField__array, 'f'),
                Object.values(this)
            );
        }
        (_a = __classPrivateFieldGet(this, _ConfigField__parent, 'f')) ===
            null || _a === void 0
            ? void 0
            : _a.__save();
    }
    __get(property) {
        if (property in __classPrivateFieldGet(this, _ConfigField__data, 'f'))
            return __classPrivateFieldGet(this, _ConfigField__data, 'f')[
                property
            ];
        if (property in this)
            return this.__set(
                property,
                Object.values(this)[Object.keys(this).indexOf(property)],
                false
            );
        return null;
    }
    __set(property, value, save = true) {
        __classPrivateFieldGet(this, _ConfigField__data, 'f')[property] =
            typeof value === 'object'
                ? value && new ConfigField(this, { ...value })
                : value;
        Object.defineProperty(this, property, {
            configurable: true,
            enumerable: true,
            get() {
                return __classPrivateFieldGet(this, _ConfigField__data, 'f')[
                    property
                ];
            },
            set(value) {
                this.__set(property, value, true);
            },
        });
        if (save) {
            this.__save();
        }
        return __classPrivateFieldGet(this, _ConfigField__data, 'f')[property];
    }
    save() {
        return this.__save();
    }
    get(property) {
        return this.__get(property);
    }
    set(property, value, save) {
        return this.__set(property, value, save);
    }
    has(property) {
        return this.__has(property);
    }
    __getField(property) {
        const value = this.__get(property);
        return value instanceof ConfigField
            ? value
            : this.__forceField(property);
    }
    __getString(property) {
        const value = this.__get(property);
        if (!value) {
            return '';
        } else if (typeof value === 'string') {
            return value;
        } else if (typeof value === 'object') {
            return Object.keys(value).length > 0
                ? JSON.stringify(value, null, '\t') + '\n'
                : '';
        } else {
            return value.toString();
        }
    }
    __getNumber(property) {
        const value = this.__get(property);
        return typeof value === 'number'
            ? value
            : Number.parseFloat(this.__getString(property)) || 0;
    }
    __getBoolean(property) {
        const value = this.__get(property);
        return typeof value === 'object'
            ? !!(value && Object.keys(value).length > 0)
            : !!value;
    }
    __getArray(property) {
        return this.__getField(property).array;
    }
    __forceField(property) {
        const field = this.__get(property);
        if (field instanceof ConfigField) {
            return field;
        } else {
            this.__set(property, field ? { data: field } : {}, false);
            return this.__getField(property);
        }
    }
    __forceString(property) {
        const value = this.__get(property);
        if (typeof value !== 'string') {
            let returnValue;
            if (typeof value === 'object') {
                this.__set(
                    property,
                    (returnValue = JSON.stringify(value)),
                    false
                );
            } else if (value) {
                this.__set(property, (returnValue = '' + value), false);
            } else {
                this.__set(property, (returnValue = ''), false);
            }
            return returnValue;
        } else return value;
    }
    __forceNumber(property) {
        const value = this.__get(property);
        if (typeof value !== 'number' || value <= Number.NEGATIVE_INFINITY) {
            let returnValue;
            this.__set(property, (returnValue = (value && +value) || 0), false);
            return returnValue;
        } else return value;
    }
    __forceBoolean(property) {
        const value = this.__get(property);
        if (typeof value !== 'boolean') {
            let returnValue;
            this.__set(property, (returnValue = !!value), false);
            return returnValue;
        } else return value;
    }
    __forceArray(property) {
        return this.__forceField(property).array;
    }
    __has(property) {
        return property in this;
    }
    __setDefault(...initArray) {
        for (const init of initArray) {
            if (init && typeof init === 'object') {
                for (const property in init) {
                    const value = init[property];
                    if (typeof value === 'object') {
                        const candidate =
                            __classPrivateFieldGet(
                                this,
                                _ConfigField__data,
                                'f'
                            )[property] || this.__set(property, {}, false);
                        const field =
                            candidate instanceof ConfigField
                                ? candidate
                                : (this.__set(
                                      property,
                                      { data: candidate },
                                      false
                                  ),
                                  this.__getField(property));
                        field.__setDefault(value);
                        if (Array.isArray(value)) {
                            field.array;
                        }
                    } else {
                        if (!this.__has(property)) {
                            this.__set(property, value, false);
                        }
                    }
                }
                if (Array.isArray(init)) {
                    this.array;
                }
            } else if (init && !this.__has('value')) {
                this.__set('value', init, false);
            }
        }
    }
    toJSON() {
        return __classPrivateFieldGet(this, _ConfigField__array, 'f')
            ? [...__classPrivateFieldGet(this, _ConfigField__array, 'f')]
            : { ...__classPrivateFieldGet(this, _ConfigField__data, 'f') };
    }
    get flat() {
        const array = __classPrivateFieldGet(this, _ConfigField__array, 'f');
        if (array) {
            return [...array].map((a) =>
                a instanceof ConfigField ? a.flat : a
            );
        } else {
            const returnValue = {};
            for (const [key, value] of this.map.entries()) {
                returnValue[key] =
                    value instanceof ConfigField ? value.flat : value;
            }
            return returnValue;
        }
    }
    __delete(property) {
        delete __classPrivateFieldGet(this, _ConfigField__data, 'f')[property];
        delete this[property];
    }
}
exports.ConfigField = ConfigField;
(_ConfigField__array = new WeakMap()),
    (_ConfigField__parent = new WeakMap()),
    (_ConfigField__data = new WeakMap());
exports.default = ConfigField;
module.exports = ConfigField;
Object.defineProperties(ConfigField, {
    default: { get: () => ConfigField },
    ConfigField: { get: () => ConfigField },
});
