#!/usr/bin/env node
'use strict';
var __importDefault =
	(this && this.__importDefault) ||
	function (mod) {
		return mod && mod.__esModule ? mod : { default: mod };
	};
Object.defineProperty(exports, '__esModule', { value: true });
const argv_1 = __importDefault(require('@prokopschield/argv'));
const fs_1 = __importDefault(require('fs'));
const blake2b_1 = require('./blake2b');
const blake2s_1 = require('./blake2s');
const { file, outlen, encoding, newline } = argv_1.default
	.alias('file', 'f', 'i', 'input')
	.alias('outlen', 'l')
	.alias('encoding', 'e', 'o', 'output', 'coding', 'hex', 'base64')
	.alias('newline', 'n', 'nl')
	.expect(['file', 'outlen', 'encoding', 'newline'], {
		encoding: process.stdout.isTTY ? 'hex' : '',
	});
const inputStream = file ? fs_1.default.createReadStream(file) : process.stdin;
const use2b = argv_1.default.execScript.includes('2b');
const functions = use2b
	? {
			init: blake2b_1.blake2bInit,
			update: blake2b_1.blake2bUpdate,
			finalize: blake2b_1.blake2bFinal,
	  }
	: {
			init: blake2s_1.blake2sInit,
			update: blake2s_1.blake2sUpdate,
			finalize: blake2s_1.blake2sFinal,
	  };
const context = functions.init(Number(outlen) || 0);
inputStream.on('data', (chunk) => functions.update(context, chunk));
inputStream.on('end', () => {
	const output = functions.finalize(context);
	const print = newline
		? console.log
		: process.stdout.write.bind(process.stdout);
	print(
		encoding === 'hex' || encoding === 'base64'
			? Buffer.from(output).toString(encoding)
			: output
	);
});
