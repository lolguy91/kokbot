import { Flattened, UnknownObject, ValidConfigValue } from '../types';
import Config from './Config';
import ConfigArray from './ConfigArray';
import ConfigMap from './ConfigMap';
export declare class ConfigField {
    #private;
    constructor(
        parent: Config | ConfigField | null,
        data: UnknownObject | null
    );
    __getTypedProxy<T extends ValidConfigValue>(
        typeConstructor: (arg: ValidConfigValue) => T
    ): {
        [key: string]: T;
    };
    get data(): {
        [key: string]: ValidConfigValue;
    };
    get bool(): {
        [key: string]: boolean;
    };
    get str(): {
        [key: string]: string;
    };
    get num(): {
        [key: string]: number;
    };
    get obj(): {
        [key: string]: ConfigField;
    };
    get array(): ConfigArray;
    get is_array(): ConfigArray | undefined;
    get map(): ConfigMap;
    __save(): void;
    __get(property: string): ValidConfigValue;
    __set(
        property: string,
        value: ValidConfigValue | UnknownObject | object,
        save?: boolean
    ): ValidConfigValue;
    save(): void;
    get(property: string): ValidConfigValue;
    set(
        property: string,
        value: ValidConfigValue | UnknownObject | object,
        save?: boolean
    ): ValidConfigValue;
    has(property: string): boolean;
    __getField(property: string): ConfigField;
    __getString(property: string): string;
    __getNumber(property: string): number;
    __getBoolean(property: string): boolean;
    __getArray(property: string): ConfigArray;
    __forceField(property: string): ConfigField;
    __forceString(property: string): string;
    __forceNumber(property: string): number;
    __forceBoolean(property: string): boolean;
    __forceArray(property: string): ConfigArray;
    __has(property: string): boolean;
    __setDefault(...initArray: Array<any>): void;
    toJSON():
        | ValidConfigValue[]
        | {
              [x: string]: ValidConfigValue;
          };
    get flat(): Flattened;
    __delete(property: string): void;
}
export default ConfigField;
