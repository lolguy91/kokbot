/// <reference types="node" />
declare type TypedArray =
	| Int8Array
	| Uint8Array
	| Uint8ClampedArray
	| Int16Array
	| Uint16Array
	| Int32Array
	| Uint32Array
	| Float32Array
	| Float64Array
	| BigInt64Array
	| BigUint64Array
	| {
			buffer: ArrayBuffer;
	  };
export declare type Hashable =
	| keyof any
	| string
	| Buffer
	| TypedArray
	| Set<Hashable>
	| Map<Hashable, Hashable>
	| Hashable[]
	| {
			[index: string | number]: Hashable;
	  };
export declare function normalizeInput(
	input: Hashable,
	stack?: Hashable[],
	decorator?: string
): Uint8Array;
export declare function toHex(bytes: ArrayLike<number>): string;
export declare function uint32ToHex(val: number): string;
export declare function debugPrint(
	label: string,
	arr: ArrayLike<number>,
	size: number
): void;
export declare function testSpeed(hashFn: Function, N: number, M: number): void;
export {};
