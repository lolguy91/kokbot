/// <reference types="node" />
import fs from 'fs';
export declare function stat(file_path: string): Promise<fs.Stats | false>;
/**
 * Asynchronously read a file
 * @param file_path Path to file, resolved to absolute path upon call
 * @returns Promise of read buffer
 */
export declare function read(file_path: string): Promise<Buffer>;
declare type TypedArray =
	| Int8Array
	| Uint8Array
	| Uint8ClampedArray
	| Int16Array
	| Uint16Array
	| Int32Array
	| Uint32Array
	| Float32Array
	| Float64Array
	| BigInt64Array
	| BigUint64Array
	| ArrayBuffer;
/**
 * Asynchronously write to a file
 * @param file_path Path to file, resolved to absolute path upon call
 * @param data Data `string` or `Buffer`
 * @returns A promise that resolves to undefined
 */
export declare function write(
	file_path: string,
	data: TypedArray | string
): Promise<void>;
export declare const finished: {
	callbacks: ((remaining_callbacks: number) => void)[];
	add_callback: (cb: (remaining_callbacks: number) => void) => number;
	get_promise: () => Promise<unknown>;
};
declare const def: {
	read: typeof read;
	write: typeof write;
	stat: typeof stat;
	finished: {
		callbacks: ((remaining_callbacks: number) => void)[];
		add_callback: (cb: (remaining_callbacks: number) => void) => number;
		get_promise: () => Promise<unknown>;
	};
};
export default def;
